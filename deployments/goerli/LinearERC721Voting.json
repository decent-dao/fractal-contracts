{
  "address": "0xC3cfF63CA596990B64146d5284520B58134773A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "IdAlreadyVoted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "IdNotOwned",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBasisNumerator",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProposal",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTokenAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVote",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoVotingWeight",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyAzorius",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotSet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VotingEnded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "azoriusModule",
          "type": "address"
        }
      ],
      "name": "AzoriusSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "basisNumerator",
          "type": "uint256"
        }
      ],
      "name": "BasisNumeratorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "GovernanceTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "GovernanceTokenRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "proposalId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "votingEndBlock",
          "type": "uint32"
        }
      ],
      "name": "ProposalInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposerThreshold",
          "type": "uint256"
        }
      ],
      "name": "ProposerThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "quorumThreshold",
          "type": "uint256"
        }
      ],
      "name": "QuorumThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "azoriusModule",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "StrategySetUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "proposalId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "voteType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "votingPeriod",
          "type": "uint32"
        }
      ],
      "name": "VotingPeriodUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASIS_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_weight",
          "type": "uint256"
        }
      ],
      "name": "addGovernanceToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "azoriusModule",
      "outputs": [
        {
          "internalType": "contract IAzorius",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "basisNumerator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        }
      ],
      "name": "getProposalVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "startBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "endBlock",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenWeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "hasVoted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "initializeProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        }
      ],
      "name": "isPassed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isProposer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_noVotes",
          "type": "uint256"
        }
      ],
      "name": "meetsBasis",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposalVotes",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "votingStartBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "votingEndBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "noVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yesVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "abstainVotes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposerThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "removeGovernanceToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_azoriusModule",
          "type": "address"
        }
      ],
      "name": "setAzorius",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "initializeParams",
          "type": "bytes"
        }
      ],
      "name": "setUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_basisNumerator",
          "type": "uint256"
        }
      ],
      "name": "updateBasisNumerator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposerThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateProposerThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quorumThreshold",
          "type": "uint256"
        }
      ],
      "name": "updateQuorumThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_votingPeriod",
          "type": "uint32"
        }
      ],
      "name": "updateVotingPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "_support",
          "type": "uint8"
        },
        {
          "internalType": "address[]",
          "name": "_tokenAddresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_proposalId",
          "type": "uint32"
        }
      ],
      "name": "votingEndBlock",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x06e579978981afefdd4cd53009d8866ce3033bee29478e2d0781dd18170f57e9",
  "receipt": {
    "to": null,
    "from": "0x8E2695650D09FD940516d6e050D0Ba87d8deF032",
    "contractAddress": "0xC3cfF63CA596990B64146d5284520B58134773A3",
    "transactionIndex": 43,
    "gasUsed": "1550391",
    "logsBloom": "0x
    "blockHash": "0x5c2cd1dadb417f51d6a28ae7b84a285480f63cc9a84d9c623cec612920229013",
    "transactionHash": "0x06e579978981afefdd4cd53009d8866ce3033bee29478e2d0781dd18170f57e9",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 9295284,
        "transactionHash": "0x06e579978981afefdd4cd53009d8866ce3033bee29478e2d0781dd18170f57e9",
        "address": "0xC3cfF63CA596990B64146d5284520B58134773A3",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 89,
        "blockHash": "0x5c2cd1dadb417f51d6a28ae7b84a285480f63cc9a84d9c623cec612920229013"
      }
    ],
    "blockNumber": 9295284,
    "cumulativeGasUsed": "7859960",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bc131257acdd5bdae5313b935ed28501",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"IdAlreadyVoted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"IdNotOwned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBasisNumerator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProposal\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVote\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoVotingWeight\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAzorius\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotSet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingEnded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"azoriusModule\",\"type\":\"address\"}],\"name\":\"AzoriusSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"basisNumerator\",\"type\":\"uint256\"}],\"name\":\"BasisNumeratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"GovernanceTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"GovernanceTokenRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"proposalId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"votingEndBlock\",\"type\":\"uint32\"}],\"name\":\"ProposalInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposerThreshold\",\"type\":\"uint256\"}],\"name\":\"ProposerThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quorumThreshold\",\"type\":\"uint256\"}],\"name\":\"QuorumThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"azoriusModule\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"StrategySetUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"proposalId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"voteType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"votingPeriod\",\"type\":\"uint32\"}],\"name\":\"VotingPeriodUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"addGovernanceToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"azoriusModule\",\"outputs\":[{\"internalType\":\"contract IAzorius\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"basisNumerator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"}],\"name\":\"getProposalVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"startBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endBlock\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"hasVoted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"initializeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"}],\"name\":\"isPassed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isProposer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_noVotes\",\"type\":\"uint256\"}],\"name\":\"meetsBasis\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposalVotes\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"votingStartBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"votingEndBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"noVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"abstainVotes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposerThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"removeGovernanceToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_azoriusModule\",\"type\":\"address\"}],\"name\":\"setAzorius\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initializeParams\",\"type\":\"bytes\"}],\"name\":\"setUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_basisNumerator\",\"type\":\"uint256\"}],\"name\":\"updateBasisNumerator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposerThreshold\",\"type\":\"uint256\"}],\"name\":\"updateProposerThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quorumThreshold\",\"type\":\"uint256\"}],\"name\":\"updateQuorumThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_votingPeriod\",\"type\":\"uint32\"}],\"name\":\"updateVotingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"_support\",\"type\":\"uint8\"},{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_proposalId\",\"type\":\"uint32\"}],\"name\":\"votingEndBlock\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"initializeProposal(bytes)\":{\"params\":{\"_data\":\"arbitrary data to pass to this BaseStrategy\"}},\"isPassed(uint32)\":{\"params\":{\"_proposalId\":\"proposalId to check\"},\"returns\":{\"_0\":\"bool true if the proposal has passed, otherwise false\"}},\"isProposer(address)\":{\"params\":{\"_address\":\"address to check\"},\"returns\":{\"_0\":\"bool true if the address can submit a Proposal, otherwise false\"}},\"meetsBasis(uint256,uint256)\":{\"params\":{\"_noVotes\":\"number of votes against\",\"_yesVotes\":\"number of votes in favor\"},\"returns\":{\"_0\":\"bool whether the yes votes meets the set basis\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAzorius(address)\":{\"params\":{\"_azoriusModule\":\"address of the Azorius Safe module\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateBasisNumerator(uint256)\":{\"params\":{\"_basisNumerator\":\"numerator to use\"}},\"votingEndBlock(uint32)\":{\"params\":{\"_proposalId\":\"proposalId to check\"},\"returns\":{\"_0\":\"uint32 block number when voting ends on the Proposal\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"BASIS_DENOMINATOR()\":{\"notice\":\"The denominator to use when calculating basis (1,000,000). \"},\"basisNumerator()\":{\"notice\":\"The numerator to use when calculating basis (adjustable). \"},\"hasVoted(uint32,address,uint256)\":{\"notice\":\"Returns whether an NFT has already voted.\"},\"initializeProposal(bytes)\":{\"notice\":\"Called by the [Azorius](../Azorius.md) module. This notifies this  [BaseStrategy](../BaseStrategy.md) that a new Proposal has been created.\"},\"isPassed(uint32)\":{\"notice\":\"Returns whether a Proposal has been passed.\"},\"isProposer(address)\":{\"notice\":\"Returns whether the specified address can submit a Proposal with this [BaseStrategy](../BaseStrategy.md). This allows a BaseStrategy to place any limits it would like on who can create new Proposals, such as requiring a minimum token delegation.\"},\"meetsBasis(uint256,uint256)\":{\"notice\":\"Calculates whether a vote meets its basis.\"},\"setAzorius(address)\":{\"notice\":\"Sets the address of the [Azorius](../Azorius.md) contract this  [BaseStrategy](../BaseStrategy.md) is being used on.\"},\"updateBasisNumerator(uint256)\":{\"notice\":\"Updates the `basisNumerator` for future Proposals.\"},\"votingEndBlock(uint32)\":{\"notice\":\"Returns the block number voting ends on a given Proposal.\"}},\"notice\":\"Allows multiple ERC721 tokens to be registered on the strategy as governance tokens,  each with their own voting weight. Since there is no way to snapshot ERC721 holdings, each ERC721 id can vote once, reguardless of where it was when a proposal was created. Also, this uses \\\"quorumThreshold\\\" rather than quorumPercent, because total supply is not knowable within the IERC721 interface.  This is similar to a multisig \\\"total signers\\\" required, rather than a percentage of the tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/azorius/LinearERC721Voting.sol\":\"LinearERC721Voting\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/// @title Enum - Collection of enums\\n/// @author Richard Meissner - <richard@gnosis.pm>\\ncontract Enum {\\n    enum Operation {Call, DelegateCall}\\n}\\n\",\"keccak256\":\"0x473e45b1a5cc47be494b0e123c9127f0c11c1e0992a321ae5a644c0bfdb2c14f\",\"license\":\"LGPL-3.0-only\"},\"@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\n\\n/// @title Zodiac FactoryFriendly - A contract that allows other contracts to be initializable and pass bytes as arguments to define contract state\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nabstract contract FactoryFriendly is OwnableUpgradeable {\\n    function setUp(bytes memory initializeParams) public virtual;\\n}\\n\",\"keccak256\":\"0x96e61585b7340a901a54eb4c157ce28b630bff3d9d4597dfaac692128ea458c4\",\"license\":\"LGPL-3.0-only\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/azorius/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity =0.8.19;\\n\\nimport { IAzorius } from \\\"./interfaces/IAzorius.sol\\\";\\nimport { IBaseStrategy } from \\\"./interfaces/IBaseStrategy.sol\\\";\\nimport { FactoryFriendly } from \\\"@gnosis.pm/zodiac/contracts/factory/FactoryFriendly.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * The base abstract contract for all voting strategies in Azorius.\\n */\\nabstract contract BaseStrategy is OwnableUpgradeable, FactoryFriendly, IBaseStrategy {\\n\\n    event AzoriusSet(address indexed azoriusModule);\\n    event StrategySetUp(address indexed azoriusModule, address indexed owner);\\n\\n    error OnlyAzorius();\\n\\n    IAzorius public azoriusModule;\\n\\n    /**\\n     * Ensures that only the [Azorius](./Azorius.md) contract that pertains to this \\n     * [BaseStrategy](./BaseStrategy.md) can call functions on it.\\n     */\\n    modifier onlyAzorius() {\\n        if (msg.sender != address(azoriusModule)) revert OnlyAzorius();\\n        _;\\n    }\\n\\n    constructor() {\\n      _disableInitializers();\\n    }\\n\\n    /** @inheritdoc IBaseStrategy*/\\n    function setAzorius(address _azoriusModule) external onlyOwner {\\n        azoriusModule = IAzorius(_azoriusModule);\\n        emit AzoriusSet(_azoriusModule);\\n    }\\n\\n    /** @inheritdoc IBaseStrategy*/\\n    function initializeProposal(bytes memory _data) external virtual;\\n\\n    /** @inheritdoc IBaseStrategy*/\\n    function isPassed(uint32 _proposalId) external view virtual returns (bool);\\n\\n    /** @inheritdoc IBaseStrategy*/\\n    function isProposer(address _address) external view virtual returns (bool);\\n\\n    /** @inheritdoc IBaseStrategy*/\\n    function votingEndBlock(uint32 _proposalId) external view virtual returns (uint32);\\n\\n    /**\\n     * Sets the address of the [Azorius](Azorius.md) module contract.\\n     *\\n     * @param _azoriusModule address of the Azorius module\\n     */\\n    function _setAzorius(address _azoriusModule) internal {\\n        azoriusModule = IAzorius(_azoriusModule);\\n        emit AzoriusSet(_azoriusModule);\\n    }\\n}\\n\",\"keccak256\":\"0xd04aeec28b5a7c7bad44f2c9dfe7641240e319b8d76d05f940453a258411c567\",\"license\":\"LGPL-3.0-only\"},\"contracts/azorius/BaseVotingBasisPercent.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity =0.8.19;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/**\\n * An Azorius extension contract that enables percent based voting basis calculations.\\n *\\n * Intended to be implemented by BaseStrategy implementations, this allows for voting strategies\\n * to dictate any basis strategy for passing a Proposal between >50% (simple majority) to 100%.\\n *\\n * See https://en.wikipedia.org/wiki/Voting#Voting_basis.\\n * See https://en.wikipedia.org/wiki/Supermajority.\\n */\\nabstract contract BaseVotingBasisPercent is OwnableUpgradeable {\\n    \\n    /** The numerator to use when calculating basis (adjustable). */\\n    uint256 public basisNumerator;\\n\\n    /** The denominator to use when calculating basis (1,000,000). */\\n    uint256 public constant BASIS_DENOMINATOR = 1_000_000;\\n\\n    error InvalidBasisNumerator();\\n\\n    event BasisNumeratorUpdated(uint256 basisNumerator);\\n\\n    /**\\n     * Updates the `basisNumerator` for future Proposals.\\n     *\\n     * @param _basisNumerator numerator to use\\n     */\\n    function updateBasisNumerator(uint256 _basisNumerator) public virtual onlyOwner {\\n        _updateBasisNumerator(_basisNumerator);\\n    }\\n\\n    /** Internal implementation of `updateBasisNumerator`. */\\n    function _updateBasisNumerator(uint256 _basisNumerator) internal virtual {\\n        if (_basisNumerator > BASIS_DENOMINATOR || _basisNumerator < BASIS_DENOMINATOR / 2)\\n            revert InvalidBasisNumerator();\\n\\n        basisNumerator = _basisNumerator;\\n\\n        emit BasisNumeratorUpdated(_basisNumerator);\\n    }\\n\\n    /**\\n     * Calculates whether a vote meets its basis.\\n     *\\n     * @param _yesVotes number of votes in favor\\n     * @param _noVotes number of votes against\\n     * @return bool whether the yes votes meets the set basis\\n     */\\n    function meetsBasis(uint256 _yesVotes, uint256 _noVotes) public view returns (bool) {\\n        return _yesVotes > (_yesVotes + _noVotes) * basisNumerator / BASIS_DENOMINATOR;\\n    }\\n}\\n\",\"keccak256\":\"0x568d4c7f3e5de10272ec675cd745a53b414ca2e3388bfeff19d8addf9e324c7e\",\"license\":\"LGPL-3.0-only\"},\"contracts/azorius/LinearERC721Voting.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity =0.8.19;\\n\\nimport { IERC721VotingStrategy } from \\\"./interfaces/IERC721VotingStrategy.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { BaseVotingBasisPercent } from \\\"./BaseVotingBasisPercent.sol\\\";\\nimport { IAzorius } from \\\"./interfaces/IAzorius.sol\\\";\\nimport { BaseStrategy } from \\\"./BaseStrategy.sol\\\";\\n\\n/**\\n * Allows multiple ERC721 tokens to be registered on the strategy as governance tokens, \\n * each with their own voting weight.\\n *\\n * Since there is no way to snapshot ERC721 holdings, each ERC721 id can vote once, reguardless\\n * of where it was when a proposal was created.\\n *\\n * Also, this uses \\\"quorumThreshold\\\" rather than quorumPercent, because total supply is not knowable\\n * within the IERC721 interface.  This is similar to a multisig \\\"total signers\\\" required, rather than\\n * a percentage of the tokens.\\n */\\ncontract LinearERC721Voting is BaseStrategy, BaseVotingBasisPercent, IERC721VotingStrategy {\\n\\n    enum VoteType {\\n        NO, \\n        YES,\\n        ABSTAIN\\n    }\\n\\n    struct ProposalVotes {\\n        uint32 votingStartBlock;\\n        uint32 votingEndBlock;\\n        uint256 noVotes;\\n        uint256 yesVotes;\\n        uint256 abstainVotes;\\n        // ERC721 address to NFT id to bool\\n        mapping(address => mapping(uint256 => bool)) hasVoted;\\n    }\\n\\n    // proposal id to proposal votes data\\n    mapping(uint256 => ProposalVotes) public proposalVotes;\\n\\n    address[] public tokenAddresses;\\n    \\n    mapping(address => uint256) public tokenWeights;\\n    \\n    uint32 public votingPeriod;\\n\\n    // \\\"quorum threshold\\\" is used instead of quorum percent because\\n    // IERC721 (and thus not all ERC721 tokens) has no totalSupply\\n    uint256 public quorumThreshold;\\n\\n    uint256 public proposerThreshold; \\n\\n    event VotingPeriodUpdated(uint32 votingPeriod);\\n    event QuorumThresholdUpdated(uint256 quorumThreshold);\\n    event ProposerThresholdUpdated(uint256 proposerThreshold);\\n    event ProposalInitialized(uint32 proposalId, uint32 votingEndBlock);\\n    event Voted(address voter, uint32 proposalId, uint8 voteType, uint256 weight);\\n    event GovernanceTokenAdded(address token, uint256 weight);\\n    event GovernanceTokenRemoved(address token);\\n\\n    error InvalidParams();\\n    error InvalidProposal();\\n    error VotingEnded();\\n    error InvalidVote();\\n    error InvalidTokenAddress();\\n    error NoVotingWeight();\\n    error TokenAlreadySet();\\n    error TokenNotSet();\\n    error IdAlreadyVoted(uint256 tokenId);\\n    error IdNotOwned(uint256 tokenId);\\n\\n    function setUp(bytes memory initializeParams) public override initializer {\\n        (\\n            address _owner,\\n            address[] memory _tokens,\\n            uint256[] memory _weights,\\n            address _azoriusModule,\\n            uint32 _votingPeriod,\\n            uint256 _quorumThreshold,\\n            uint256 _proposerThreshold,\\n            uint256 _basisNumerator\\n        ) = abi.decode(\\n            initializeParams,\\n            (address, address[], uint256[], address, uint32, uint256, uint256, uint256)\\n        );\\n\\n        if (_tokens.length != _weights.length) {\\n            revert InvalidParams();\\n        }\\n\\n        for (uint i = 0; i < _tokens.length;) {\\n            addGovernanceToken(_tokens[i], _weights[i]);\\n            unchecked { ++i; }\\n        }\\n\\n        __Ownable_init();\\n        transferOwnership(_owner);\\n        _setAzorius(_azoriusModule);\\n        _updateQuorumThreshold(_quorumThreshold);\\n        _updateProposerThreshold(_proposerThreshold);\\n        _updateBasisNumerator(_basisNumerator);\\n        _updateVotingPeriod(_votingPeriod);\\n\\n        emit StrategySetUp(_azoriusModule, _owner);\\n    }\\n\\n    function updateVotingPeriod(uint32 _votingPeriod) external onlyOwner {\\n        _updateVotingPeriod(_votingPeriod);\\n    }\\n\\n    function updateQuorumThreshold(uint256 _quorumThreshold) external onlyOwner {\\n        _updateQuorumThreshold(_quorumThreshold);\\n    }\\n\\n    function updateProposerThreshold(uint256 _proposerThreshold) external onlyOwner {\\n        _updateProposerThreshold(_proposerThreshold);\\n    }\\n\\n    function getProposalVotes(uint32 _proposalId) external view\\n        returns (\\n            uint256 noVotes,\\n            uint256 yesVotes,\\n            uint256 abstainVotes,\\n            uint32 startBlock,\\n            uint32 endBlock\\n        )\\n    {\\n        noVotes = proposalVotes[_proposalId].noVotes;\\n        yesVotes = proposalVotes[_proposalId].yesVotes;\\n        abstainVotes = proposalVotes[_proposalId].abstainVotes;\\n        startBlock = proposalVotes[_proposalId].votingStartBlock;\\n        endBlock = proposalVotes[_proposalId].votingEndBlock;\\n    }\\n\\n    function vote(\\n        uint32 _proposalId, \\n        uint8 _support, \\n        address[] memory _tokenAddresses,\\n        uint256[] memory _tokenIds \\n    ) external {\\n        if (_tokenAddresses.length != _tokenIds.length) revert InvalidParams();\\n        _vote(_proposalId, msg.sender, _support, _tokenAddresses, _tokenIds);\\n    }\\n\\n    function getTokenWeight(address _tokenAddress) external view override returns (uint256) {\\n        return tokenWeights[_tokenAddress];\\n    }\\n\\n    /**\\n     * Returns whether an NFT has already voted.\\n     */\\n    function hasVoted(uint32 _proposalId, address _tokenAddress, uint256 _tokenId) external view returns (bool) {\\n        return proposalVotes[_proposalId].hasVoted[_tokenAddress][_tokenId];\\n    }\\n\\n    function removeGovernanceToken(address _tokenAddress) external onlyOwner {\\n        if (tokenWeights[_tokenAddress] == 0) revert TokenNotSet();\\n\\n        tokenWeights[_tokenAddress] = 0;\\n\\n        uint256 length = tokenAddresses.length;\\n        for (uint256 i = 0; i < length;) {\\n            if (_tokenAddress == tokenAddresses[i]) {\\n                uint256 last = length - 1;\\n                tokenAddresses[i] = tokenAddresses[last]; // move the last token into the position to remove\\n                delete tokenAddresses[last];              // delete the last token\\n                break;\\n            }\\n            unchecked { ++i; }\\n        }\\n        \\n        emit GovernanceTokenRemoved(_tokenAddress);\\n    }\\n\\n    function addGovernanceToken(address _tokenAddress, uint256 _weight) public onlyOwner {\\n        if (!IERC721(_tokenAddress).supportsInterface(0x80ac58cd))\\n            revert InvalidTokenAddress();\\n        \\n        if (_weight == 0)\\n            revert NoVotingWeight();\\n\\n        if (tokenWeights[_tokenAddress] > 0)\\n            revert TokenAlreadySet();\\n\\n        tokenAddresses.push(_tokenAddress);\\n        tokenWeights[_tokenAddress] = _weight;\\n\\n        emit GovernanceTokenAdded(_tokenAddress, _weight);\\n    }\\n\\n    /** @inheritdoc BaseStrategy*/\\n    function initializeProposal(bytes memory _data) public virtual override onlyAzorius {\\n        uint32 proposalId = abi.decode(_data, (uint32));\\n        uint32 _votingEndBlock = uint32(block.number) + votingPeriod;\\n\\n        proposalVotes[proposalId].votingEndBlock = _votingEndBlock;\\n        proposalVotes[proposalId].votingStartBlock = uint32(block.number);\\n\\n        emit ProposalInitialized(proposalId, _votingEndBlock);\\n    }\\n\\n    /** @inheritdoc BaseStrategy*/\\n    function isPassed(uint32 _proposalId) public view override returns (bool) {\\n        return (\\n            block.number > proposalVotes[_proposalId].votingEndBlock && // voting period has ended\\n            quorumThreshold <= proposalVotes[_proposalId].yesVotes + proposalVotes[_proposalId].abstainVotes && // yes + abstain votes meets the quorum\\n            meetsBasis(proposalVotes[_proposalId].yesVotes, proposalVotes[_proposalId].noVotes) // yes votes meets the basis\\n        );\\n    }\\n\\n    /** @inheritdoc BaseStrategy*/\\n    function isProposer(address _address) public view override returns (bool) {\\n        uint256 totalWeight = 0;\\n        for (uint i = 0; i < tokenAddresses.length;) {\\n            address tokenAddress = tokenAddresses[i];\\n            totalWeight += IERC721(tokenAddress).balanceOf(_address) * tokenWeights[tokenAddress];\\n            unchecked { ++i; }\\n        }\\n        return totalWeight >= proposerThreshold;\\n    }\\n\\n    /** @inheritdoc BaseStrategy*/\\n    function votingEndBlock(uint32 _proposalId) public view override returns (uint32) {\\n      return proposalVotes[_proposalId].votingEndBlock;\\n    }\\n\\n    /** Internal implementation of `updateVotingPeriod`. */\\n    function _updateVotingPeriod(uint32 _votingPeriod) internal {\\n        votingPeriod = _votingPeriod;\\n        emit VotingPeriodUpdated(_votingPeriod);\\n    }\\n\\n    /** Internal implementation of `updateQuorumThreshold`. */\\n    function _updateQuorumThreshold(uint256 _quorumThreshold) internal {\\n        quorumThreshold = _quorumThreshold;\\n        emit QuorumThresholdUpdated(quorumThreshold);\\n    }\\n\\n    /** Internal implementation of `updateProposerThreshold`. */\\n    function _updateProposerThreshold(uint256 _proposerThreshold) internal {\\n        proposerThreshold = _proposerThreshold;\\n        emit ProposerThresholdUpdated(_proposerThreshold);\\n    }\\n\\n    function _vote(\\n        uint32 _proposalId,\\n        address _voter,\\n        uint8 _voteType,\\n        address[] memory _tokenAddresses,\\n        uint256[] memory _tokenIds\\n    ) internal {\\n\\n        uint256 weight;\\n\\n        // verifies the voter holds the NFTs and returns the total weight associated with their tokens\\n        // the frontend will need to determine whether an address can vote on a proposal, as it is possible\\n        // to vote twice if you get more weight later on\\n        for (uint256 i = 0; i < _tokenAddresses.length;) {\\n\\n            address tokenAddress = _tokenAddresses[i];\\n            uint256 tokenId = _tokenIds[i];\\n\\n            if (_voter != IERC721(tokenAddress).ownerOf(tokenId)) {\\n                revert IdNotOwned(tokenId);\\n            }\\n\\n            if (proposalVotes[_proposalId].hasVoted[tokenAddress][tokenId] == true) {\\n                revert IdAlreadyVoted(tokenId);\\n            }\\n            \\n            weight += tokenWeights[tokenAddress];\\n            proposalVotes[_proposalId].hasVoted[tokenAddress][tokenId] = true;\\n            unchecked { ++i; }\\n        }\\n\\n        if (weight == 0) revert NoVotingWeight();\\n\\n        ProposalVotes storage proposal = proposalVotes[_proposalId];\\n\\n        if (proposal.votingEndBlock == 0)\\n            revert InvalidProposal();\\n\\n        if (block.number > proposal.votingEndBlock)\\n            revert VotingEnded();\\n\\n        if (_voteType == uint8(VoteType.NO)) {\\n            proposal.noVotes += weight;\\n        } else if (_voteType == uint8(VoteType.YES)) {\\n            proposal.yesVotes += weight;\\n        } else if (_voteType == uint8(VoteType.ABSTAIN)) {\\n            proposal.abstainVotes += weight;\\n        } else {\\n            revert InvalidVote();\\n        }\\n\\n        emit Voted(_voter, _proposalId, _voteType, weight);\\n    }\\n}\\n\",\"keccak256\":\"0xc83e21d6b792ff4d904d9950a9b41ddc6b42596fa871a4395382c7c31a2d05dd\",\"license\":\"LGPL-3.0-only\"},\"contracts/azorius/interfaces/IAzorius.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\nimport { Enum } from \\\"@gnosis.pm/safe-contracts/contracts/common/Enum.sol\\\";\\n\\n/**\\n * The base interface for the Azorius governance Safe module.\\n * Azorius conforms to the Zodiac pattern for Safe modules: https://github.com/gnosis/zodiac\\n *\\n * Azorius manages the state of Proposals submitted to a DAO, along with the associated strategies\\n * ([BaseStrategy](../BaseStrategy.md)) for voting that are enabled on the DAO.\\n *\\n * Any given DAO can support multiple voting BaseStrategies, and these strategies are intended to be\\n * as customizable as possible.\\n *\\n * Proposals begin in the `ACTIVE` state and will ultimately end in either\\n * the `EXECUTED`, `EXPIRED`, or `FAILED` state.\\n *\\n * `ACTIVE` - a new proposal begins in this state, and stays in this state\\n *          for the duration of its voting period.\\n *\\n * `TIMELOCKED` - A proposal that passes enters the `TIMELOCKED` state, during which\\n *          it cannot yet be executed.  This is to allow time for token holders\\n *          to potentially exit their position, as well as parent DAOs time to\\n *          initiate a freeze, if they choose to do so. A proposal stays timelocked\\n *          for the duration of its `timelockPeriod`.\\n *\\n * `EXECUTABLE` - Following the `TIMELOCKED` state, a passed proposal becomes `EXECUTABLE`,\\n *          and can then finally be executed on chain by anyone.\\n *\\n * `EXECUTED` - the final state for a passed proposal.  The proposal has been executed\\n *          on the blockchain.\\n *\\n * `EXPIRED` - a passed proposal which is not executed before its `executionPeriod` has\\n *          elapsed will be `EXPIRED`, and can no longer be executed.\\n *\\n * `FAILED` - a failed proposal (as defined by its [BaseStrategy](../BaseStrategy.md) \\n *          `isPassed` function). For a basic strategy, this would mean it received more \\n *          NO votes than YES or did not achieve quorum. \\n */\\ninterface IAzorius {\\n\\n    /** Represents a transaction to perform on the blockchain. */\\n    struct Transaction {\\n        address to; // destination address of the transaction\\n        uint256 value; // amount of ETH to transfer with the transaction\\n        bytes data; // encoded function call data of the transaction\\n        Enum.Operation operation; // Operation type, Call or DelegateCall\\n    }\\n\\n    /** Holds details pertaining to a single proposal. */\\n    struct Proposal {\\n        uint32 executionCounter; // count of transactions that have been executed within the proposal\\n        uint32 timelockPeriod; // time (in blocks) this proposal will be timelocked for if it passes\\n        uint32 executionPeriod; // time (in blocks) this proposal has to be executed after timelock ends before it is expired\\n        address strategy; // BaseStrategy contract this proposal was created on\\n        bytes32[] txHashes; // hashes of the transactions that are being proposed\\n    }\\n\\n    /** The list of states in which a Proposal can be in at any given time. */\\n    enum ProposalState {\\n        ACTIVE,\\n        TIMELOCKED,\\n        EXECUTABLE,\\n        EXECUTED,\\n        EXPIRED,\\n        FAILED\\n    }\\n\\n    /**\\n     * Enables a [BaseStrategy](../BaseStrategy.md) implementation for newly created Proposals.\\n     *\\n     * Multiple strategies can be enabled, and new Proposals will be able to be\\n     * created using any of the currently enabled strategies.\\n     *\\n     * @param _strategy contract address of the BaseStrategy to be enabled\\n     */\\n    function enableStrategy(address _strategy) external;\\n\\n    /**\\n     * Disables a previously enabled [BaseStrategy](../BaseStrategy.md) implementation for new proposals.\\n     * This has no effect on existing Proposals, either `ACTIVE` or completed.\\n     *\\n     * @param _prevStrategy BaseStrategy address that pointed in the linked list to the strategy to be removed\\n     * @param _strategy address of the BaseStrategy to be removed\\n     */\\n    function disableStrategy(address _prevStrategy, address _strategy) external;\\n\\n    /**\\n     * Updates the `timelockPeriod` for newly created Proposals.\\n     * This has no effect on existing Proposals, either `ACTIVE` or completed.\\n     *\\n     * @param _timelockPeriod timelockPeriod (in blocks) to be used for new Proposals\\n     */\\n    function updateTimelockPeriod(uint32 _timelockPeriod) external;\\n\\n    /**\\n     * Updates the execution period for future Proposals.\\n     *\\n     * @param _executionPeriod new execution period (in blocks)\\n     */\\n    function updateExecutionPeriod(uint32 _executionPeriod) external;\\n\\n    /**\\n     * Submits a new Proposal, using one of the enabled [BaseStrategies](../BaseStrategy.md).\\n     * New Proposals begin immediately in the `ACTIVE` state.\\n     *\\n     * @param _strategy address of the BaseStrategy implementation which the Proposal will use\\n     * @param _data arbitrary data passed to the BaseStrategy implementation. This may not be used by all strategies, \\n     * but is included in case future strategy contracts have a need for it\\n     * @param _transactions array of transactions to propose\\n     * @param _metadata additional data such as a title/description to submit with the proposal\\n     */\\n    function submitProposal(\\n        address _strategy,\\n        bytes memory _data,\\n        Transaction[] calldata _transactions,\\n        string calldata _metadata\\n    ) external;\\n\\n    /**\\n     * Executes all transactions within a Proposal.\\n     * This will only be able to be called if the Proposal passed.\\n     *\\n     * @param _proposalId identifier of the Proposal\\n     * @param _targets target contracts for each transaction\\n     * @param _values ETH values to be sent with each transaction\\n     * @param _data transaction data to be executed\\n     * @param _operations Calls or Delegatecalls\\n     */\\n    function executeProposal(\\n        uint32 _proposalId,\\n        address[] memory _targets,\\n        uint256[] memory _values,\\n        bytes[] memory _data,\\n        Enum.Operation[] memory _operations\\n    ) external;\\n\\n    /**\\n     * Returns whether a [BaseStrategy](../BaseStrategy.md) implementation is enabled.\\n     *\\n     * @param _strategy contract address of the BaseStrategy to check\\n     * @return bool True if the strategy is enabled, otherwise False\\n     */\\n    function isStrategyEnabled(address _strategy) external view returns (bool);\\n\\n    /**\\n     * Returns an array of enabled [BaseStrategy](../BaseStrategy.md) contract addresses.\\n     * Because the list of BaseStrategies is technically unbounded, this\\n     * requires the address of the first strategy you would like, along\\n     * with the total count of strategies to return, rather than\\n     * returning the whole list at once.\\n     *\\n     * @param _startAddress contract address of the BaseStrategy to start with\\n     * @param _count maximum number of BaseStrategies that should be returned\\n     * @return _strategies array of BaseStrategies\\n     * @return _next next BaseStrategy contract address in the linked list\\n     */\\n    function getStrategies(\\n        address _startAddress,\\n        uint256 _count\\n    ) external view returns (address[] memory _strategies, address _next);\\n\\n    /**\\n     * Gets the state of a Proposal.\\n     *\\n     * @param _proposalId identifier of the Proposal\\n     * @return ProposalState uint256 ProposalState enum value representing the\\n     *         current state of the proposal\\n     */\\n    function proposalState(uint32 _proposalId) external view returns (ProposalState);\\n\\n    /**\\n     * Generates the data for the module transaction hash (required for signing).\\n     *\\n     * @param _to target address of the transaction\\n     * @param _value ETH value to send with the transaction\\n     * @param _data encoded function call data of the transaction\\n     * @param _operation Enum.Operation to use for the transaction\\n     * @param _nonce Safe nonce of the transaction\\n     * @return bytes hashed transaction data\\n     */\\n    function generateTxHashData(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data,\\n        Enum.Operation _operation,\\n        uint256 _nonce\\n    ) external view returns (bytes memory);\\n\\n    /**\\n     * Returns the `keccak256` hash of the specified transaction.\\n     *\\n     * @param _to target address of the transaction\\n     * @param _value ETH value to send with the transaction\\n     * @param _data encoded function call data of the transaction\\n     * @param _operation Enum.Operation to use for the transaction\\n     * @return bytes32 transaction hash\\n     */\\n    function getTxHash(\\n        address _to,\\n        uint256 _value,\\n        bytes memory _data,\\n        Enum.Operation _operation\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * Returns the hash of a transaction in a Proposal.\\n     *\\n     * @param _proposalId identifier of the Proposal\\n     * @param _txIndex index of the transaction within the Proposal\\n     * @return bytes32 hash of the specified transaction\\n     */\\n    function getProposalTxHash(uint32 _proposalId, uint32 _txIndex) external view returns (bytes32);\\n\\n    /**\\n     * Returns the transaction hashes associated with a given `proposalId`.\\n     *\\n     * @param _proposalId identifier of the Proposal to get transaction hashes for\\n     * @return bytes32[] array of transaction hashes\\n     */\\n    function getProposalTxHashes(uint32 _proposalId) external view returns (bytes32[] memory);\\n\\n    /**\\n     * Returns details about the specified Proposal.\\n     *\\n     * @param _proposalId identifier of the Proposal\\n     * @return _strategy address of the BaseStrategy contract the Proposal is on\\n     * @return _txHashes hashes of the transactions the Proposal contains\\n     * @return _timelockPeriod time (in blocks) the Proposal is timelocked for\\n     * @return _executionPeriod time (in blocks) the Proposal must be executed within, after timelock ends\\n     * @return _executionCounter counter of how many of the Proposals transactions have been executed\\n     */\\n    function getProposal(uint32 _proposalId) external view\\n        returns (\\n            address _strategy,\\n            bytes32[] memory _txHashes,\\n            uint32 _timelockPeriod,\\n            uint32 _executionPeriod,\\n            uint32 _executionCounter\\n        );\\n}\\n\",\"keccak256\":\"0x1a656aacd0b0f11dec2b92d70153dc3a1b7019e9f76dd43f7c91a21fb8cfef3d\",\"license\":\"MIT\"},\"contracts/azorius/interfaces/IBaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity =0.8.19;\\n\\n/**\\n * The specification for a voting strategy in Azorius.\\n *\\n * Each IBaseStrategy implementation need only implement the given functions here,\\n * which allows for highly composable but simple or complex voting strategies.\\n *\\n * It should be noted that while many voting strategies make use of parameters such as\\n * voting period or quorum, that is a detail of the individual strategy itself, and not\\n * a requirement for the Azorius protocol.\\n */\\ninterface IBaseStrategy {\\n\\n    /**\\n     * Sets the address of the [Azorius](../Azorius.md) contract this \\n     * [BaseStrategy](../BaseStrategy.md) is being used on.\\n     *\\n     * @param _azoriusModule address of the Azorius Safe module\\n     */\\n    function setAzorius(address _azoriusModule) external;\\n\\n    /**\\n     * Called by the [Azorius](../Azorius.md) module. This notifies this \\n     * [BaseStrategy](../BaseStrategy.md) that a new Proposal has been created.\\n     *\\n     * @param _data arbitrary data to pass to this BaseStrategy\\n     */\\n    function initializeProposal(bytes memory _data) external;\\n\\n    /**\\n     * Returns whether a Proposal has been passed.\\n     *\\n     * @param _proposalId proposalId to check\\n     * @return bool true if the proposal has passed, otherwise false\\n     */\\n    function isPassed(uint32 _proposalId) external view returns (bool);\\n\\n    /**\\n     * Returns whether the specified address can submit a Proposal with\\n     * this [BaseStrategy](../BaseStrategy.md).\\n     *\\n     * This allows a BaseStrategy to place any limits it would like on\\n     * who can create new Proposals, such as requiring a minimum token\\n     * delegation.\\n     *\\n     * @param _address address to check\\n     * @return bool true if the address can submit a Proposal, otherwise false\\n     */\\n    function isProposer(address _address) external view returns (bool);\\n\\n    /**\\n     * Returns the block number voting ends on a given Proposal.\\n     *\\n     * @param _proposalId proposalId to check\\n     * @return uint32 block number when voting ends on the Proposal\\n     */\\n    function votingEndBlock(uint32 _proposalId) external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x5ad8cdea65caa49f4116c67ebcbc12094676ac64d70c35643a4cc517c8b220fe\",\"license\":\"LGPL-3.0-only\"},\"contracts/azorius/interfaces/IERC721VotingStrategy.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity =0.8.19;\\n\\ninterface IERC721VotingStrategy {\\n\\n    function getTokenWeight(address _tokenAddress) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8f65d7850c2bc001505fe542cca9f99087e46d29a7d9eba3eafa40e67490b2f1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611a97806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638081be9111610104578063bf7e2c7f116100a2578063deb61c1511610071578063deb61c15146104a6578063e5df8b841461051f578063e8575a7f14610532578063f2fde38b1461054557600080fd5b8063bf7e2c7f14610434578063c0dce37f1461043d578063c909c3b114610450578063d877ee1d1461049d57600080fd5b8063a4f9edbf116100de578063a4f9edbf146103db578063a77a81d0146103ee578063ab2f3ad414610401578063b1d1196f1461042157600080fd5b80638081be91146103ad5780638da5cb5b146103b7578063918f84bf146103c857600080fd5b806353a8b3201161017157806366b629551161014b57806366b629551461035e578063715018a61461038957806374ec29a0146103915780637b7a91dd146103a457600080fd5b806353a8b32014610296578063544ffc9c146102b957806355a9dbd91461032e57600080fd5b8063250aa683116101ad578063250aa6831461022657806333f48a5e1461025d57806337938ab3146102705780634e2addad1461028357600080fd5b806302a251a3146101d45780631dc48947146101fe578063210a5e8714610213575b600080fd5b606a546101e49063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b61021161020c3660046113fa565b610558565b005b6102116102213660046113fa565b61056c565b61024f610234366004611428565b6001600160a01b031660009081526069602052604090205490565b6040519081526020016101f5565b61021161026b36600461145e565b61057d565b61021161027e366004611428565b61058e565b610211610291366004611551565b6105e0565b6102a96102a436600461145e565b610615565b60405190151581526020016101f5565b6102fe6102c73660046113fa565b606760205260009081526040902080546001820154600283015460039093015463ffffffff80841694600160201b90940416929085565b6040805163ffffffff9687168152959094166020860152928401919091526060830152608082015260a0016101f5565b6101e461033c36600461145e565b63ffffffff908116600090815260676020526040902054600160201b90041690565b606554610371906001600160a01b031681565b6040516001600160a01b0390911681526020016101f5565b6102116106a7565b6102a961039f366004611428565b6106bb565b61024f606b5481565b61024f620f424081565b6033546001600160a01b0316610371565b6102a96103d6366004611640565b610796565b6102116103e9366004611662565b6107c8565b6102116103fc366004611662565b610a01565b61024f61040f366004611428565b60696020526000908152604090205481565b61021161042f3660046116f7565b610ae0565b61024f60665481565b61021161044b366004611428565b610c5c565b6102a961045e366004611723565b63ffffffff831660009081526067602090815260408083206001600160a01b0386168452600401825280832084845290915290205460ff169392505050565b61024f606c5481565b6104ee6104b436600461145e565b63ffffffff908116600090815260676020526040902060018101546002820154600383015492549194909382811692600160201b90041690565b6040805195865260208601949094529284019190915263ffffffff908116606084015216608082015260a0016101f5565b61037161052d3660046113fa565b610de6565b6102116105403660046113fa565b610e10565b610211610553366004611428565b610e21565b610560610e97565b61056981610ef1565b50565b610574610e97565b61056981610f2d565b610585610e97565b61056981610f62565b610596610e97565b606580546001600160a01b0319166001600160a01b0383169081179091556040517fac8d831a6ed53a98387842e08d9e0893c1d478f4a3710b254e22bd58c06b269090600090a250565b805182511461060257604051635435b28960e11b815260040160405180910390fd5b61060f8433858585610faa565b50505050565b63ffffffff8082166000908152606760205260408120549091600160201b9091041643118015610670575063ffffffff82166000908152606760205260409020600381015460029091015461066a919061177a565b606b5411155b80156106a1575063ffffffff8216600090815260676020526040902060028101546001909101546106a19190610796565b92915050565b6106af610e97565b6106b960006112d9565b565b600080805b60685481101561078a576000606882815481106106df576106df61178d565b6000918252602080832091909101546001600160a01b0390811680845260699092526040928390205492516370a0823160e01b8152908816600482015290925082906370a0823190602401602060405180830381865afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b91906117a3565b61077591906117bc565b61077f908461177a565b9250506001016106c0565b50606c54111592915050565b6000620f424060665483856107ab919061177a565b6107b591906117bc565b6107bf91906117d3565b90921192915050565b600054610100900460ff16158080156107e85750600054600160ff909116105b806108025750303b158015610802575060005460ff166001145b61086a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561088d576000805461ff0019166101001790555b600080600080600080600080898060200190518101906108ad919061186b565b9750975097509750975097509750975085518751146108df57604051635435b28960e11b815260040160405180910390fd5b60005b875181101561092f576109278882815181106109005761090061178d565b602002602001015188838151811061091a5761091a61178d565b6020026020010151610ae0565b6001016108e2565b5061093861132b565b61094188610e21565b61094a85610596565b61095383610f2d565b61095c82610ef1565b6109658161135a565b61096e84610f62565b876001600160a01b0316856001600160a01b03167fca32f512f02914f6bc16a49e786443029061b9adc5a987fd2f6efa56c0116a1660405160405180910390a3505050505050505080156109fd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b6065546001600160a01b03163314610a2c576040516358c30ce160e01b815260040160405180910390fd5b600081806020019051810190610a429190611983565b606a54909150600090610a5b9063ffffffff16436119a0565b63ffffffff838116600081815260676020908152604091829020805467ffffffffffffffff1916600160201b87871690810263ffffffff1916919091174390961695909517905581519283528201929092529192507f80d0ad93bba25e53bf67fa9f2d13df59f04795ec2f91b9b3c1f607666daf9d64910160405180910390a1505050565b610ae8610e97565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5791906119c4565b610b7457604051630f58058360e11b815260040160405180910390fd5b80600003610b955760405163923d21f560e01b815260040160405180910390fd5b6001600160a01b03821660009081526069602052604090205415610bcc576040516371168e4f60e11b815260040160405180910390fd5b60688054600181019091557fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c220977530180546001600160a01b0319166001600160a01b038416908117909155600081815260696020908152604091829020849055815192835282018390527fbf2b7f9fc6e849fdef9ff7366d8b63b608bc69ca778200c53d77372d953dc6b691016109f4565b610c64610e97565b6001600160a01b0381166000908152606960205260408120549003610c9c57604051634b62f01360e01b815260040160405180910390fd5b6001600160a01b0381166000908152606960205260408120819055606854905b81811015610dac5760688181548110610cd757610cd761178d565b6000918252602090912001546001600160a01b0390811690841603610da4576000610d036001846119e6565b905060688181548110610d1857610d1861178d565b600091825260209091200154606880546001600160a01b039092169184908110610d4457610d4461178d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060688181548110610d8557610d8561178d565b600091825260209091200180546001600160a01b031916905550610dac565b600101610cbc565b506040516001600160a01b03831681527f14236c39816f331325d02993fa15113b739aff01c21ab8f38cc5253205299fb1906020016109f4565b60688181548110610df657600080fd5b6000918252602090912001546001600160a01b0316905081565b610e18610e97565b6105698161135a565b610e29610e97565b6001600160a01b038116610e8e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610861565b610569816112d9565b6033546001600160a01b031633146106b95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610861565b606c8190556040518181527f48f79e03d92b3595f74bc3c64746cf148e464673dd036633d34f8afb029482c9906020015b60405180910390a150565b606b8190556040518181527fbc589fccf641d342b7853c2c6faca39631d4d19efbe77e71e5611e31678c220e90602001610f22565b606a805463ffffffff191663ffffffff83169081179091556040519081527f70770ce479f70673c3ed8fff63cfb758a6ffdddc30cab7c63d54c8d825e3948890602001610f22565b6000805b8351811015611166576000848281518110610fcb57610fcb61178d565b602002602001015190506000848381518110610fe957610fe961178d565b60200260200101519050816001600160a01b0316636352211e826040518263ffffffff1660e01b815260040161102191815260200190565b602060405180830381865afa15801561103e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106291906119f9565b6001600160a01b0316886001600160a01b03161461109657604051639b936ae960e01b815260048101829052602401610861565b63ffffffff891660009081526067602090815260408083206001600160a01b0386168452600401825280832084845290915290205460ff1615156001036110f357604051639602f71160e01b815260048101829052602401610861565b6001600160a01b038216600090815260696020526040902054611116908561177a565b63ffffffff8a1660009081526067602090815260408083206001600160a01b0390961683526004909501815284822093825292909252919020805460ff1916600190811790915590925001610fae565b50806000036111885760405163923d21f560e01b815260040160405180910390fd5b63ffffffff808716600090815260676020526040812080549092600160201b9091041690036111ca57604051631dc0650160e31b815260040160405180910390fd5b8054600160201b900463ffffffff164311156111f957604051637a19ed0560e01b815260040160405180910390fd5b60ff85166112205781816001016000828254611215919061177a565b909155506112799050565b60001960ff8616016112405781816002016000828254611215919061177a565b60011960ff8616016112605781816003016000828254611215919061177a565b604051636aee863360e11b815260040160405180910390fd5b604080516001600160a01b038816815263ffffffff8916602082015260ff8716818301526060810184905290517fe82b577bd384111662dd034b9114cbe59b26ea201f009d385006518ed28bed819181900360800190a150505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166113525760405162461bcd60e51b815260040161086190611a16565b6106b96113ca565b620f424081118061137757506113746002620f42406117d3565b81105b15611395576040516302396b6b60e61b815260040160405180910390fd5b60668190556040518181527f406c076eac4d3dde1c5d55793e80239daa8c60ee971390ce3d9f90ca4206295390602001610f22565b600054610100900460ff166113f15760405162461bcd60e51b815260040161086190611a16565b6106b9336112d9565b60006020828403121561140c57600080fd5b5035919050565b6001600160a01b038116811461056957600080fd5b60006020828403121561143a57600080fd5b813561144581611413565b9392505050565b63ffffffff8116811461056957600080fd5b60006020828403121561147057600080fd5b81356114458161144c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156114ba576114ba61147b565b604052919050565b600067ffffffffffffffff8211156114dc576114dc61147b565b5060051b60200190565b600082601f8301126114f757600080fd5b8135602061150c611507836114c2565b611491565b82815260059290921b8401810191818101908684111561152b57600080fd5b8286015b84811015611546578035835291830191830161152f565b509695505050505050565b6000806000806080858703121561156757600080fd5b84356115728161144c565b935060208581013560ff8116811461158957600080fd5b9350604086013567ffffffffffffffff808211156115a657600080fd5b818801915088601f8301126115ba57600080fd5b81356115c8611507826114c2565b81815260059190911b8301840190848101908b8311156115e757600080fd5b938501935b8285101561160e5784356115ff81611413565b825293850193908501906115ec565b96505050606088013592508083111561162657600080fd5b5050611634878288016114e6565b91505092959194509250565b6000806040838503121561165357600080fd5b50508035926020909101359150565b6000602080838503121561167557600080fd5b823567ffffffffffffffff8082111561168d57600080fd5b818501915085601f8301126116a157600080fd5b8135818111156116b3576116b361147b565b6116c5601f8201601f19168501611491565b915080825286848285010111156116db57600080fd5b8084840185840137600090820190930192909252509392505050565b6000806040838503121561170a57600080fd5b823561171581611413565b946020939093013593505050565b60008060006060848603121561173857600080fd5b83356117438161144c565b9250602084013561175381611413565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b808201808211156106a1576106a1611764565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156117b557600080fd5b5051919050565b80820281158282048414176106a1576106a1611764565b6000826117f057634e487b7160e01b600052601260045260246000fd5b500490565b805161180081611413565b919050565b600082601f83011261181657600080fd5b81516020611826611507836114c2565b82815260059290921b8401810191818101908684111561184557600080fd5b8286015b848110156115465780518352918301918301611849565b80516118008161144c565b600080600080600080600080610100898b03121561188857600080fd5b885161189381611413565b809850506020808a015167ffffffffffffffff808211156118b357600080fd5b818c0191508c601f8301126118c757600080fd5b81516118d5611507826114c2565b81815260059190911b8301840190848101908f8311156118f457600080fd5b938501935b8285101561191b57845161190c81611413565b825293850193908501906118f9565b60408f0151909c50945050508083111561193457600080fd5b50506119428b828c01611805565b96505061195160608a016117f5565b945061195f60808a01611860565b935060a0890151925060c0890151915060e089015190509295985092959890939650565b60006020828403121561199557600080fd5b81516114458161144c565b63ffffffff8181168382160190808211156119bd576119bd611764565b5092915050565b6000602082840312156119d657600080fd5b8151801515811461144557600080fd5b818103818111156106a1576106a1611764565b600060208284031215611a0b57600080fd5b815161144581611413565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220ab81278447586746b58149e69172a44d6cbe0a6856499ffac2018827c4ed43e764736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c80638081be9111610104578063bf7e2c7f116100a2578063deb61c1511610071578063deb61c15146104a6578063e5df8b841461051f578063e8575a7f14610532578063f2fde38b1461054557600080fd5b8063bf7e2c7f14610434578063c0dce37f1461043d578063c909c3b114610450578063d877ee1d1461049d57600080fd5b8063a4f9edbf116100de578063a4f9edbf146103db578063a77a81d0146103ee578063ab2f3ad414610401578063b1d1196f1461042157600080fd5b80638081be91146103ad5780638da5cb5b146103b7578063918f84bf146103c857600080fd5b806353a8b3201161017157806366b629551161014b57806366b629551461035e578063715018a61461038957806374ec29a0146103915780637b7a91dd146103a457600080fd5b806353a8b32014610296578063544ffc9c146102b957806355a9dbd91461032e57600080fd5b8063250aa683116101ad578063250aa6831461022657806333f48a5e1461025d57806337938ab3146102705780634e2addad1461028357600080fd5b806302a251a3146101d45780631dc48947146101fe578063210a5e8714610213575b600080fd5b606a546101e49063ffffffff1681565b60405163ffffffff90911681526020015b60405180910390f35b61021161020c3660046113fa565b610558565b005b6102116102213660046113fa565b61056c565b61024f610234366004611428565b6001600160a01b031660009081526069602052604090205490565b6040519081526020016101f5565b61021161026b36600461145e565b61057d565b61021161027e366004611428565b61058e565b610211610291366004611551565b6105e0565b6102a96102a436600461145e565b610615565b60405190151581526020016101f5565b6102fe6102c73660046113fa565b606760205260009081526040902080546001820154600283015460039093015463ffffffff80841694600160201b90940416929085565b6040805163ffffffff9687168152959094166020860152928401919091526060830152608082015260a0016101f5565b6101e461033c36600461145e565b63ffffffff908116600090815260676020526040902054600160201b90041690565b606554610371906001600160a01b031681565b6040516001600160a01b0390911681526020016101f5565b6102116106a7565b6102a961039f366004611428565b6106bb565b61024f606b5481565b61024f620f424081565b6033546001600160a01b0316610371565b6102a96103d6366004611640565b610796565b6102116103e9366004611662565b6107c8565b6102116103fc366004611662565b610a01565b61024f61040f366004611428565b60696020526000908152604090205481565b61021161042f3660046116f7565b610ae0565b61024f60665481565b61021161044b366004611428565b610c5c565b6102a961045e366004611723565b63ffffffff831660009081526067602090815260408083206001600160a01b0386168452600401825280832084845290915290205460ff169392505050565b61024f606c5481565b6104ee6104b436600461145e565b63ffffffff908116600090815260676020526040902060018101546002820154600383015492549194909382811692600160201b90041690565b6040805195865260208601949094529284019190915263ffffffff908116606084015216608082015260a0016101f5565b61037161052d3660046113fa565b610de6565b6102116105403660046113fa565b610e10565b610211610553366004611428565b610e21565b610560610e97565b61056981610ef1565b50565b610574610e97565b61056981610f2d565b610585610e97565b61056981610f62565b610596610e97565b606580546001600160a01b0319166001600160a01b0383169081179091556040517fac8d831a6ed53a98387842e08d9e0893c1d478f4a3710b254e22bd58c06b269090600090a250565b805182511461060257604051635435b28960e11b815260040160405180910390fd5b61060f8433858585610faa565b50505050565b63ffffffff8082166000908152606760205260408120549091600160201b9091041643118015610670575063ffffffff82166000908152606760205260409020600381015460029091015461066a919061177a565b606b5411155b80156106a1575063ffffffff8216600090815260676020526040902060028101546001909101546106a19190610796565b92915050565b6106af610e97565b6106b960006112d9565b565b600080805b60685481101561078a576000606882815481106106df576106df61178d565b6000918252602080832091909101546001600160a01b0390811680845260699092526040928390205492516370a0823160e01b8152908816600482015290925082906370a0823190602401602060405180830381865afa158015610747573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076b91906117a3565b61077591906117bc565b61077f908461177a565b9250506001016106c0565b50606c54111592915050565b6000620f424060665483856107ab919061177a565b6107b591906117bc565b6107bf91906117d3565b90921192915050565b600054610100900460ff16158080156107e85750600054600160ff909116105b806108025750303b158015610802575060005460ff166001145b61086a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561088d576000805461ff0019166101001790555b600080600080600080600080898060200190518101906108ad919061186b565b9750975097509750975097509750975085518751146108df57604051635435b28960e11b815260040160405180910390fd5b60005b875181101561092f576109278882815181106109005761090061178d565b602002602001015188838151811061091a5761091a61178d565b6020026020010151610ae0565b6001016108e2565b5061093861132b565b61094188610e21565b61094a85610596565b61095383610f2d565b61095c82610ef1565b6109658161135a565b61096e84610f62565b876001600160a01b0316856001600160a01b03167fca32f512f02914f6bc16a49e786443029061b9adc5a987fd2f6efa56c0116a1660405160405180910390a3505050505050505080156109fd576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b5050565b6065546001600160a01b03163314610a2c576040516358c30ce160e01b815260040160405180910390fd5b600081806020019051810190610a429190611983565b606a54909150600090610a5b9063ffffffff16436119a0565b63ffffffff838116600081815260676020908152604091829020805467ffffffffffffffff1916600160201b87871690810263ffffffff1916919091174390961695909517905581519283528201929092529192507f80d0ad93bba25e53bf67fa9f2d13df59f04795ec2f91b9b3c1f607666daf9d64910160405180910390a1505050565b610ae8610e97565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038316906301ffc9a790602401602060405180830381865afa158015610b33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5791906119c4565b610b7457604051630f58058360e11b815260040160405180910390fd5b80600003610b955760405163923d21f560e01b815260040160405180910390fd5b6001600160a01b03821660009081526069602052604090205415610bcc576040516371168e4f60e11b815260040160405180910390fd5b60688054600181019091557fa2153420d844928b4421650203c77babc8b33d7f2e7b450e2966db0c220977530180546001600160a01b0319166001600160a01b038416908117909155600081815260696020908152604091829020849055815192835282018390527fbf2b7f9fc6e849fdef9ff7366d8b63b608bc69ca778200c53d77372d953dc6b691016109f4565b610c64610e97565b6001600160a01b0381166000908152606960205260408120549003610c9c57604051634b62f01360e01b815260040160405180910390fd5b6001600160a01b0381166000908152606960205260408120819055606854905b81811015610dac5760688181548110610cd757610cd761178d565b6000918252602090912001546001600160a01b0390811690841603610da4576000610d036001846119e6565b905060688181548110610d1857610d1861178d565b600091825260209091200154606880546001600160a01b039092169184908110610d4457610d4461178d565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060688181548110610d8557610d8561178d565b600091825260209091200180546001600160a01b031916905550610dac565b600101610cbc565b506040516001600160a01b03831681527f14236c39816f331325d02993fa15113b739aff01c21ab8f38cc5253205299fb1906020016109f4565b60688181548110610df657600080fd5b6000918252602090912001546001600160a01b0316905081565b610e18610e97565b6105698161135a565b610e29610e97565b6001600160a01b038116610e8e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610861565b610569816112d9565b6033546001600160a01b031633146106b95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610861565b606c8190556040518181527f48f79e03d92b3595f74bc3c64746cf148e464673dd036633d34f8afb029482c9906020015b60405180910390a150565b606b8190556040518181527fbc589fccf641d342b7853c2c6faca39631d4d19efbe77e71e5611e31678c220e90602001610f22565b606a805463ffffffff191663ffffffff83169081179091556040519081527f70770ce479f70673c3ed8fff63cfb758a6ffdddc30cab7c63d54c8d825e3948890602001610f22565b6000805b8351811015611166576000848281518110610fcb57610fcb61178d565b602002602001015190506000848381518110610fe957610fe961178d565b60200260200101519050816001600160a01b0316636352211e826040518263ffffffff1660e01b815260040161102191815260200190565b602060405180830381865afa15801561103e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106291906119f9565b6001600160a01b0316886001600160a01b03161461109657604051639b936ae960e01b815260048101829052602401610861565b63ffffffff891660009081526067602090815260408083206001600160a01b0386168452600401825280832084845290915290205460ff1615156001036110f357604051639602f71160e01b815260048101829052602401610861565b6001600160a01b038216600090815260696020526040902054611116908561177a565b63ffffffff8a1660009081526067602090815260408083206001600160a01b0390961683526004909501815284822093825292909252919020805460ff1916600190811790915590925001610fae565b50806000036111885760405163923d21f560e01b815260040160405180910390fd5b63ffffffff808716600090815260676020526040812080549092600160201b9091041690036111ca57604051631dc0650160e31b815260040160405180910390fd5b8054600160201b900463ffffffff164311156111f957604051637a19ed0560e01b815260040160405180910390fd5b60ff85166112205781816001016000828254611215919061177a565b909155506112799050565b60001960ff8616016112405781816002016000828254611215919061177a565b60011960ff8616016112605781816003016000828254611215919061177a565b604051636aee863360e11b815260040160405180910390fd5b604080516001600160a01b038816815263ffffffff8916602082015260ff8716818301526060810184905290517fe82b577bd384111662dd034b9114cbe59b26ea201f009d385006518ed28bed819181900360800190a150505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166113525760405162461bcd60e51b815260040161086190611a16565b6106b96113ca565b620f424081118061137757506113746002620f42406117d3565b81105b15611395576040516302396b6b60e61b815260040160405180910390fd5b60668190556040518181527f406c076eac4d3dde1c5d55793e80239daa8c60ee971390ce3d9f90ca4206295390602001610f22565b600054610100900460ff166113f15760405162461bcd60e51b815260040161086190611a16565b6106b9336112d9565b60006020828403121561140c57600080fd5b5035919050565b6001600160a01b038116811461056957600080fd5b60006020828403121561143a57600080fd5b813561144581611413565b9392505050565b63ffffffff8116811461056957600080fd5b60006020828403121561147057600080fd5b81356114458161144c565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156114ba576114ba61147b565b604052919050565b600067ffffffffffffffff8211156114dc576114dc61147b565b5060051b60200190565b600082601f8301126114f757600080fd5b8135602061150c611507836114c2565b611491565b82815260059290921b8401810191818101908684111561152b57600080fd5b8286015b84811015611546578035835291830191830161152f565b509695505050505050565b6000806000806080858703121561156757600080fd5b84356115728161144c565b935060208581013560ff8116811461158957600080fd5b9350604086013567ffffffffffffffff808211156115a657600080fd5b818801915088601f8301126115ba57600080fd5b81356115c8611507826114c2565b81815260059190911b8301840190848101908b8311156115e757600080fd5b938501935b8285101561160e5784356115ff81611413565b825293850193908501906115ec565b96505050606088013592508083111561162657600080fd5b5050611634878288016114e6565b91505092959194509250565b6000806040838503121561165357600080fd5b50508035926020909101359150565b6000602080838503121561167557600080fd5b823567ffffffffffffffff8082111561168d57600080fd5b818501915085601f8301126116a157600080fd5b8135818111156116b3576116b361147b565b6116c5601f8201601f19168501611491565b915080825286848285010111156116db57600080fd5b8084840185840137600090820190930192909252509392505050565b6000806040838503121561170a57600080fd5b823561171581611413565b946020939093013593505050565b60008060006060848603121561173857600080fd5b83356117438161144c565b9250602084013561175381611413565b929592945050506040919091013590565b634e487b7160e01b600052601160045260246000fd5b808201808211156106a1576106a1611764565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156117b557600080fd5b5051919050565b80820281158282048414176106a1576106a1611764565b6000826117f057634e487b7160e01b600052601260045260246000fd5b500490565b805161180081611413565b919050565b600082601f83011261181657600080fd5b81516020611826611507836114c2565b82815260059290921b8401810191818101908684111561184557600080fd5b8286015b848110156115465780518352918301918301611849565b80516118008161144c565b600080600080600080600080610100898b03121561188857600080fd5b885161189381611413565b809850506020808a015167ffffffffffffffff808211156118b357600080fd5b818c0191508c601f8301126118c757600080fd5b81516118d5611507826114c2565b81815260059190911b8301840190848101908f8311156118f457600080fd5b938501935b8285101561191b57845161190c81611413565b825293850193908501906118f9565b60408f0151909c50945050508083111561193457600080fd5b50506119428b828c01611805565b96505061195160608a016117f5565b945061195f60808a01611860565b935060a0890151925060c0890151915060e089015190509295985092959890939650565b60006020828403121561199557600080fd5b81516114458161144c565b63ffffffff8181168382160190808211156119bd576119bd611764565b5092915050565b6000602082840312156119d657600080fd5b8151801515811461144557600080fd5b818103818111156106a1576106a1611764565b600060208284031215611a0b57600080fd5b815161144581611413565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220ab81278447586746b58149e69172a44d6cbe0a6856499ffac2018827c4ed43e764736f6c63430008130033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "initializeProposal(bytes)": {
        "params": {
          "_data": "arbitrary data to pass to this BaseStrategy"
        }
      },
      "isPassed(uint32)": {
        "params": {
          "_proposalId": "proposalId to check"
        },
        "returns": {
          "_0": "bool true if the proposal has passed, otherwise false"
        }
      },
      "isProposer(address)": {
        "params": {
          "_address": "address to check"
        },
        "returns": {
          "_0": "bool true if the address can submit a Proposal, otherwise false"
        }
      },
      "meetsBasis(uint256,uint256)": {
        "params": {
          "_noVotes": "number of votes against",
          "_yesVotes": "number of votes in favor"
        },
        "returns": {
          "_0": "bool whether the yes votes meets the set basis"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAzorius(address)": {
        "params": {
          "_azoriusModule": "address of the Azorius Safe module"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateBasisNumerator(uint256)": {
        "params": {
          "_basisNumerator": "numerator to use"
        }
      },
      "votingEndBlock(uint32)": {
        "params": {
          "_proposalId": "proposalId to check"
        },
        "returns": {
          "_0": "uint32 block number when voting ends on the Proposal"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "BASIS_DENOMINATOR()": {
        "notice": "The denominator to use when calculating basis (1,000,000). "
      },
      "basisNumerator()": {
        "notice": "The numerator to use when calculating basis (adjustable). "
      },
      "hasVoted(uint32,address,uint256)": {
        "notice": "Returns whether an NFT has already voted."
      },
      "initializeProposal(bytes)": {
        "notice": "Called by the [Azorius](../Azorius.md) module. This notifies this  [BaseStrategy](../BaseStrategy.md) that a new Proposal has been created."
      },
      "isPassed(uint32)": {
        "notice": "Returns whether a Proposal has been passed."
      },
      "isProposer(address)": {
        "notice": "Returns whether the specified address can submit a Proposal with this [BaseStrategy](../BaseStrategy.md). This allows a BaseStrategy to place any limits it would like on who can create new Proposals, such as requiring a minimum token delegation."
      },
      "meetsBasis(uint256,uint256)": {
        "notice": "Calculates whether a vote meets its basis."
      },
      "setAzorius(address)": {
        "notice": "Sets the address of the [Azorius](../Azorius.md) contract this  [BaseStrategy](../BaseStrategy.md) is being used on."
      },
      "updateBasisNumerator(uint256)": {
        "notice": "Updates the `basisNumerator` for future Proposals."
      },
      "votingEndBlock(uint32)": {
        "notice": "Returns the block number voting ends on a given Proposal."
      }
    },
    "notice": "Allows multiple ERC721 tokens to be registered on the strategy as governance tokens,  each with their own voting weight. Since there is no way to snapshot ERC721 holdings, each ERC721 id can vote once, reguardless of where it was when a proposal was created. Also, this uses \"quorumThreshold\" rather than quorumPercent, because total supply is not knowable within the IERC721 interface.  This is similar to a multisig \"total signers\" required, rather than a percentage of the tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3006,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 3009,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5908,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2800,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2920,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 15331,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "azoriusModule",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IAzorius)17331"
      },
      {
        "astId": 15431,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "basisNumerator",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 16282,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "proposalVotes",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_struct(ProposalVotes)16277_storage)"
      },
      {
        "astId": 16285,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "tokenAddresses",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 16289,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "tokenWeights",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 16291,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "votingPeriod",
        "offset": 0,
        "slot": "106",
        "type": "t_uint32"
      },
      {
        "astId": 16293,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "quorumThreshold",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 16295,
        "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
        "label": "proposerThreshold",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAzorius)17331": {
        "encoding": "inplace",
        "label": "contract IAzorius",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(ProposalVotes)16277_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct LinearERC721Voting.ProposalVotes)",
        "numberOfBytes": "32",
        "value": "t_struct(ProposalVotes)16277_storage"
      },
      "t_struct(ProposalVotes)16277_storage": {
        "encoding": "inplace",
        "label": "struct LinearERC721Voting.ProposalVotes",
        "members": [
          {
            "astId": 16262,
            "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
            "label": "votingStartBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 16264,
            "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
            "label": "votingEndBlock",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 16266,
            "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
            "label": "noVotes",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16268,
            "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
            "label": "yesVotes",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16270,
            "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
            "label": "abstainVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16276,
            "contract": "contracts/azorius/LinearERC721Voting.sol:LinearERC721Voting",
            "label": "hasVoted",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}