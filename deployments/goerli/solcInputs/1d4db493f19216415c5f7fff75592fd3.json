{
  "language": "Solidity",
  "sources": {
    "contracts/FractalRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity =0.8.19;\r\n\r\nimport { IFractalRegistry } from \"./interfaces/IFractalRegistry.sol\";\r\n\r\n/**\r\n * Implementation of [IFractalRegistry](./interfaces/IFractalRegistry.md).\r\n */\r\ncontract FractalRegistry is IFractalRegistry {\r\n\r\n    event FractalNameUpdated(address indexed daoAddress, string daoName);\r\n    event FractalSubDAODeclared(address indexed parentDAOAddress, address indexed subDAOAddress);\r\n\r\n    /** @inheritdoc IFractalRegistry*/\r\n    function updateDAOName(string memory _name) external {\r\n        emit FractalNameUpdated(msg.sender, _name);\r\n    }\r\n\r\n    /** @inheritdoc IFractalRegistry*/\r\n    function declareSubDAO(address _subDAOAddress) external {\r\n        emit FractalSubDAODeclared(msg.sender, _subDAOAddress);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IFractalRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity =0.8.19;\r\n\r\n/**\r\n * A utility contract which logs events pertaining to Fractal DAO metadata.\r\n */\r\ninterface IFractalRegistry {\r\n\r\n    /**\r\n     * Updates a DAO's registered \"name\". This is a simple string\r\n     * with no restrictions or validation for uniqueness.\r\n     *\r\n     * @param _name new DAO name\r\n     */\r\n    function updateDAOName(string memory _name) external;\r\n\r\n    /**\r\n     * Declares an address as a subDAO of the caller's address.\r\n     *\r\n     * This declaration has no binding logic, and serves only\r\n     * to allow us to find the list of \"potential\" subDAOs of any \r\n     * given Safe address.\r\n     *\r\n     * Given the list of declaring events, we can then check each\r\n     * Safe still has a [FractalModule](../FractalModule.md) attached.\r\n     *\r\n     * If no FractalModule is attached, we'll exclude it from the\r\n     * DAO hierarchy.\r\n     *\r\n     * In the case of a Safe attaching a FractalModule without calling \r\n     * to declare it, we would unfortunately not know to display it \r\n     * as a subDAO.\r\n     *\r\n     * @param _subDAOAddress address of the subDAO to declare \r\n     *      as a child of the caller\r\n     */\r\n    function declareSubDAO(address _subDAOAddress) external;\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}