{
  "language": "Solidity",
  "sources": {
    "contracts/CallbackGnosis.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/ICallbackGnosis.sol\";\r\n\r\n/// @notice Operated via the GnosisFactory's createProxyWithCallback method\r\n/// @notice Purpose - Setup Gnosis Safe w/ any arb method calls\r\ncontract CallbackGnosis is ICallbackGnosis {\r\n    /// @dev Method called once a proxy contract is created\r\n    /// @param proxy GnosisSafe address\r\n    /// @param initializer Payload used to setup GnosisSafe Configuration \r\n    function proxyCreated(\r\n        GnosisSafeProxy proxy,\r\n        address,\r\n        bytes calldata initializer,\r\n        uint256\r\n    ) external {\r\n        (bytes memory txData, bytes memory signature) = abi.decode(\r\n            initializer,\r\n            (bytes, bytes)\r\n        );\r\n\r\n        (\r\n            address[][] memory targets,\r\n            bytes[][] memory txs,\r\n            bool[] memory gnosisExecTxs\r\n        ) = abi.decode(txData, (address[][], bytes[][], bool[]));\r\n\r\n        for (uint256 i; i < targets.length; i++) {\r\n            if (gnosisExecTxs[i]) {\r\n                gnosisExecTx(targets[i], txs[i], address(proxy), signature);\r\n            } else {\r\n                multiTx(targets[i], txs[i], address(proxy));\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @notice Allows Gnosis Safe txs without knowledge of the Gnosis address\r\n    /// @dev Utilized to bypass the txGuard / Sig Requirement \r\n    /// @param _targets Contract Address / Address(0) == proxy\r\n    /// @param _txs Target payload\r\n    /// @param _proxy GnosisSafe Address\r\n    function multiTx(\r\n        address[] memory _targets,\r\n        bytes[] memory _txs,\r\n        address _proxy\r\n    ) public {\r\n        for (uint256 i; i < _targets.length; i++) {\r\n            (bool success, ) = address(_targets[i] == address(0) ? _proxy : _targets[i]).call(_txs[i]);\r\n            require(success, \"CB001\");\r\n        }\r\n    }\r\n\r\n    /// @notice Executes a tx within the context of the Gnosis Safe\r\n    /// @dev msg.sender == GnosisSafe Address\r\n    /// @param _targets Contract Address / Address(0) == proxy\r\n    /// @param _txs Target payload\r\n    /// @param _proxy GnosisSafe Address\r\n    /// @param _signature Signatures req. to execTransaction => Gnosis Safe\r\n    function gnosisExecTx(address[] memory _targets, bytes[] memory _txs, address _proxy, bytes memory _signature) internal {\r\n        (bool success, ) = address(_proxy).call(\r\n                abi.encodeWithSignature(\r\n                    \"execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)\",\r\n                    address(this), // multisend address\r\n                    0,\r\n                    abi.encodeWithSignature(\r\n                        \"multiTx(address[],bytes[],address)\",\r\n                        _targets,\r\n                        _txs,\r\n                        _proxy\r\n                    ), // data\r\n                    1,\r\n                    0,\r\n                    0,\r\n                    0,\r\n                    address(0),\r\n                    payable(0),\r\n                    _signature\r\n                )\r\n            );\r\n            require(success, \"CB000\");\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/ICallbackGnosis.sol": {
      "content": "//SPDX-License-Identifier: Unlicense\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol\";\r\n\r\ninterface ICallbackGnosis is IProxyCreationCallback {\r\n    /// @notice Allows Gnosis Safe txs without knowledge of the Gnosis address\r\n    /// @dev Utilized to bypass the txGuard / Sig Requirement\r\n    /// @param _targets Contract Address / Address(0) == proxy\r\n    /// @param _txs Target payload\r\n    /// @param _proxy GnosisSafe Address\r\n    function multiTx(\r\n        address[] memory _targets,\r\n        bytes[] memory _txs,\r\n        address _proxy\r\n    ) external;\r\n}\r\n"
    },
    "@gnosis.pm/safe-contracts/contracts/proxies/IProxyCreationCallback.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\nimport \"./GnosisSafeProxy.sol\";\n\ninterface IProxyCreationCallback {\n    function proxyCreated(\n        GnosisSafeProxy proxy,\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external;\n}\n"
    },
    "@gnosis.pm/safe-contracts/contracts/proxies/GnosisSafeProxy.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\n/// @author Richard Meissner - <richard@gnosis.io>\ninterface IProxy {\n    function masterCopy() external view returns (address);\n}\n\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract GnosisSafeProxy {\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\n    address internal singleton;\n\n    /// @dev Constructor function sets address of singleton contract.\n    /// @param _singleton Singleton address.\n    constructor(address _singleton) {\n        require(_singleton != address(0), \"Invalid singleton address provided\");\n        singleton = _singleton;\n    }\n\n    /// @dev Fallback function forwards all transactions and returns all received return data.\n    fallback() external payable {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\n                mstore(0, _singleton)\n                return(0, 0x20)\n            }\n            calldatacopy(0, 0, calldatasize())\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if eq(success, 0) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}