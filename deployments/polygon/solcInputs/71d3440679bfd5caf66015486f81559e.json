{
  "language": "Solidity",
  "sources": {
    "contracts/FractalRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./interfaces/IFractalRegistry.sol\";\r\n\r\n/// @notice An utility contract for settling DAO's name and declaring parent->child relationships.\r\n/// @notice Might be extended in future to handle more Fractal-specific utility stuff\r\n/// @notice The name of the DAO and child->parent relationships are not stored and not verified anyhow.\r\n/// @notice So those events should be used only for visual representation and not actual business logic.\r\ncontract FractalRegistry is IFractalRegistry {\r\n    /// @notice Updates the DAO's registered name. It's not unique so shouldn't be used for differentiating DAOs anyhow\r\n    /// @param _name The new DAO name. \r\n    function updateDAOName(string memory _name) external {\r\n        emit FractalNameUpdated(msg.sender, _name);\r\n    }\r\n\r\n    /// @notice Declares certain address as subDAO of parentDAO.\r\n    /// @param _subDAOAddress Address of subDAO to declare as child of parentDAO.\r\n    function declareSubDAO(address _subDAOAddress) external {\r\n        emit FractalSubDAODeclared(msg.sender, _subDAOAddress);\r\n    }\r\n}\r\n"
    },
    "contracts/interfaces/IFractalRegistry.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IFractalRegistry {\r\n    event FractalNameUpdated(address indexed daoAddress, string daoName);\r\n    event FractalSubDAODeclared(address indexed parentDAOAddress, address indexed subDAOAddress);\r\n\r\n    /// @notice Updates the DAO's registered name\r\n    /// @param _name The new DAO name\r\n    function updateDAOName(string memory _name) external;\r\n\r\n    /// @notice Declares certain address as subDAO of parentDAO.\r\n    /// @param _subDAOAddress Address of subDAO to declare as child of parentDAO.\r\n    function declareSubDAO(address _subDAOAddress) external;\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}