{
  "language": "Solidity",
  "sources": {
    "contracts/interfaces/IKeyValuePairs.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity =0.8.19;\r\n\r\n/**\r\n * A utility contract to log key / value pair events for the calling address.\r\n */\r\ninterface IKeyValuePairs {\r\n\r\n    /**\r\n     * Logs the given key / value pairs, along with the caller's address.\r\n     *\r\n     * @param _keys the keys\r\n     * @param _values the values\r\n     */\r\n    function updateValues(string[] memory _keys, string[] memory _values) external;\r\n}\r\n"
    },
    "contracts/KeyValuePairs.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity =0.8.19;\r\n\r\nimport { IKeyValuePairs } from \"./interfaces/IKeyValuePairs.sol\";\r\n\r\n/**\r\n * Implementation of [IKeyValuePairs](./interfaces/IKeyValuePairs.md), a utility \r\n * contract to log key / value pair events for the calling address.\r\n */\r\ncontract KeyValuePairs is IKeyValuePairs {\r\n\r\n    event ValueUpdated(address indexed theAddress, string key, string value);\r\n\r\n    error IncorrectValueCount();\r\n\r\n    /** @inheritdoc IKeyValuePairs*/\r\n    function updateValues(string[] memory _keys, string[] memory _values) external {\r\n\r\n        uint256 keyCount = _keys.length;\r\n\r\n        if (keyCount != _values.length)\r\n            revert IncorrectValueCount();\r\n\r\n        for (uint256 i; i < keyCount; ) {\r\n            emit ValueUpdated(msg.sender, _keys[i], _values[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}